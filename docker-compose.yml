services:
  watchtower:
    image: containrrr/watchtower
    command:
      - '--label-enable'
      - '--interval'
      - '30'
      - '--rolling-restart'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks:
      - web

  reverse-proxy:
    image: traefik:v3.1
    command:
      - '--api.insecure=true'
      - '--providers.docker'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.email=romandenysovsk@gmail.com'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entryPoint.to=websecure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      - './letsencrypt:/letsencrypt'
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks:
      - web
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.letsencrypt.rule=Host(`traefik.pekarenkromka.sk`)'
      - 'traefik.http.routers.letsencrypt.entrypoints=websecure'
      - 'traefik.http.routers.letsencrypt.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  kromka-ecom:
    image: ghcr.io/romandenysov/kromka-ecom:prod
    env_file:
      - ../.env
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.kromka-ecom.rule=Host(`pekarenkromka.sk`)'
      - 'traefik.http.routers.kromka-ecom.entrypoints=websecure'
      - 'traefik.http.routers.kromka-ecom.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'
    restart: always
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - postgres
    secrets:
      - postgres-password
    networks:
      - web
      - internal
    expose:
      - '3000'

  postgres:
    image: postgres:16
    restart: always
    container_name: kromka-ecom-postgres
    user: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=kromka-ecom
    secrets:
      - postgres-password
    networks:
      - internal

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: romandenysovsk@gmail.com
      PGADMIN_DEFAULT_PASSWORD: kromka2024
    depends_on:
      - postgres
    networks:
      - web
      - internal
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.pgadmin.rule=Host(`pgadmin.pekarenkromka.sk`)'
      - 'traefik.http.routers.pgadmin.entrypoints=websecure'
      - 'traefik.http.routers.pgadmin.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  portainer:
    image: portainer/portainer-ce
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - web
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.pekarenkromka.sk`)'
      - 'traefik.http.routers.portainer.entrypoints=websecure'
      - 'traefik.http.routers.portainer.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - internal
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.pekarenkromka.sk`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  grafana:
    image: grafana/grafana
    restart: always
    depends_on:
      - prometheus
    networks:
      - web
      - internal
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.pekarenkromka.sk`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  uptime-kuma:
    image: louislam/uptime-kuma
    restart: always
    volumes:
      - uptime-kuma-data:/app/data
    networks:
      - web
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.uptime-kuma.rule=Host(`uptime.pekarenkromka.sk`)'
      - 'traefik.http.routers.uptime-kuma.entrypoints=websecure'
      - 'traefik.http.routers.uptime-kuma.tls.certresolver=myresolver'
      - 'com.centurylinklabs.watchtower.enable=true'

  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    networks:
      - internal
    expose:
      - '9100'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'

secrets:
  postgres-password:
    file: ../db/password.txt

networks:
  web:
    external: false
  internal:
    external: false

volumes:
  postgres_data:
  letsencrypt:
  portainer_data:
  prometheus_data:
  uptime-kuma-data:
